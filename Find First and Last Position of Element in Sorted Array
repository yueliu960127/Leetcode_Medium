Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]



class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        #builtin Bisect function
        # low = bisect.bisect_left(nums, target)
        # if target in nums[low:low+1]:
        #     return [low, bisect.bisect_right(nums, target)-1]
        # else:
        #     return [-1, -1]
        
        #Binary Search
        def BS(tar):
            low = 0
            high = len(nums)
            while low < high:
                mid = (low + high)//2
                if nums[mid] >= tar:
                    high = mid
                else:
                    low = mid + 1
            return low
        
        low = BS(target)
        if target in nums[low:low+1]:
            return [low, BS(target+1)-1]
        else:
            return [-1, -1]
