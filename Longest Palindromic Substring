class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        # import numpy as np
        # strings = []
        # max_lengths = []
        # for i in range(len(s)):
        #     j = len(s) - 1
        #     while j > i:
        #         if s[i:j] == s[i:j][::-1]:
        #             max_lengths.append(len(s[i:j]))
        #             strings.append(str(s[i:j]))
        #         j -= 1
        # return strings[np.argmax(max_lengths)]
#         n = len(s)
        
#         ret = ''
#         for i in range(n):
#             # 奇回文的情况
#             l, r = i, i
#             while s[l] == s[r]:
#                 l -= 1
#                 r += 1
#                 if l < 0 or r >= n:
#                     break
#             if r - l - 1 > len(ret):
#                 ret = s[l+1: r]
            
#             # 偶回文的情况
#             l, r = i-1, i
#             while l >= 0 and s[l] == s[r]:
#                 l -= 1
#                 r += 1
#                 if l < 0 or r >= n:
#                     break
#             if r - l - 1 > len(ret):
#                 ret = s[l+1: r]
                
#         return ret

"""
Manacher's Algorithm:
"""
        def transform(s):
            return '$#' + '#'.join(list(s)) + '#&'
        
        if s == '':
            return s
        # 初始化
        s = transform(s)
        p = [0 for _ in range(len(s)+1)]
        mr, id_ = 0, 0
        # 首尾是特殊字符，所以下标从1到len(s)-2
        for i in range(1, len(s)-1):
            # 计算p[i]
            p[i] = 1 if mr <= i else min(p[2*id_-i], mr - i)

            # 只有当前i已经摆脱id限制，或者是第三种情况时，才有可能继续延伸
            # 这个只是优化，不加这个判断一样可以运行
            if mr <= i or p[2*id_-i] == mr - i:
                while s[i - p[i]] == s[i + p[i]]:
                    p[i] += 1

                if i + p[i] > mr:
                    mr, id_ = i + p[i], i
        # 找到长度最长的下标
        id_ = p.index(max(p))
        # 获得整个回文的字符串
        palindromic = s[id_ - p[id_]+1: id_ + p[id_]]
        # 过滤掉#，还原为原字符
        return ''.join(filter(lambda x: x != '#', list(palindromic)))
